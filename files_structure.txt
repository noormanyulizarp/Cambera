Directory Structure:
└── .
└── .replit
└── README-Reader.md
└── file_test
├── file_test
│   └── sub_folder_test
├── file_test
│   ├── sub_folder_test
│   │   └── sub_test1.txt
├── file_test
│   └── sub_folder_test2
├── file_test
│   ├── sub_folder_test2
│   │   └── ara.txt
├── file_test
│   ├── sub_folder_test2
│   │   └── bal
├── file_test
│   ├── sub_folder_test2
│   │   ├── bal
│   │   │   └── Bal.txt
├── file_test
│   └── test1.txt
└── go.mod
└── main.go
└── replit.nix

--------------------
// The size of (.): 220B
--------------------
// The file location of (.):
└── . (<-)
--------------------
--------------------
// The size of (.replit): 214B
--------------------
// The file location of (.replit):
└── .replit (<-)
--------------------

// The content of (.replit):
entrypoint = "main.go"

modules = ["go"]

[gitHubImport]
requiredFiles = [".replit"]

[deployment]
build = ["sh", "-c", "go build main.go"]
run = ["sh", "-c", "./main"]
ignorePorts = false
deploymentTarget = "gce"

--------------------
--------------------
// The size of (README-Reader.md): 2KB
--------------------
// The file location of (README-Reader.md):
└── README-Reader.md (<-)
--------------------

// The content of (README-Reader.md):
# Directory Structure Analyzer

This Go script analyzes the directory structure of a project, providing detailed information about each file, including its size, location, and content. It's designed to be a helpful tool for developers to understand and manage the files in their project efficiently.

## Features

- **File Size Calculation**: Calculates and displays the size of each file.
- **File Location**: Shows the hierarchical location of each file within the project directory.
- **File Content Display**: Prints the content of each file.
- **Exclusion Logic**: Ignores specified files and directories, configurable via a `.readerignore` file.

## Getting Started

### Prerequisites

- Go (Golang) installed on your system.

### Installation

1. Clone the repository or download the `main.go` script to your project directory.
2. Ensure that Go is properly installed and set up on your system.

### Usage

1. Navigate to the directory where `main.go` is located.
2. Run the script using the Go command:

   ```sh
   go run main.go

## Output File

The script will generate a file named `files_structure.txt` in your directory, containing the analysis of your project's structure. This file includes details such as:

- The size of each file within the project.
- The location of each file in the directory structure.
- The contents of each file.

## `.readerignore` File

Upon initial run, the script creates a default `.readerignore` file. This file specifies patterns for files and directories that the script should ignore during analysis. These patterns help in focusing the analysis on relevant files, thereby enhancing efficiency and reducing clutter in the output.

You are encouraged to modify the `.readerignore` file according to the specific needs of your project. Common patterns and use cases include:

- **Version Control Directories**: Typically `.git` directories, where version control data is stored.
- **Node Modules**: The `node_modules` directory, which can contain a large number of files from node dependencies and usually doesn't need to be analyzed.
- **IDE-Specific Directories**: Such as `.vscode` and `.idea`, which contain configurations and settings specific to individual development environments.
- **Operating System-Generated Files**: Files like `.DS_Store` (macOS) and `Thumbs.db` (Windows), which are automatically generated by the operating system.
- **Log Files**: Any files ending with `.log`, which are generally log files created by various applications.
- **Temporary Files**: Files like `*~` and `*.swp`, which are temporary files created by text editors and other tools.

By customizing this file, you can tailor the directory analysis to better suit the nature and requirements of your project.

--------------------
--------------------
// The size of (file_test): 80B
--------------------
// The file location of (file_test):
└── file_test (<-)
--------------------
--------------------
// The size of (file_test/sub_folder_test): 26B
--------------------
// The file location of (file_test/sub_folder_test):
├── file_test
│   └── sub_folder_test (<-)
--------------------
--------------------
// The size of (file_test/sub_folder_test/sub_test1.txt): 0B
--------------------
// The file location of (file_test/sub_folder_test/sub_test1.txt):
├── file_test
│   ├── sub_folder_test
│   │   └── sub_test1.txt (<-)
--------------------

// The content of (file_test/sub_folder_test/sub_test1.txt):

--------------------
--------------------
// The size of (file_test/sub_folder_test2): 20B
--------------------
// The file location of (file_test/sub_folder_test2):
├── file_test
│   └── sub_folder_test2 (<-)
--------------------
--------------------
// The size of (file_test/sub_folder_test2/ara.txt): 7B
--------------------
// The file location of (file_test/sub_folder_test2/ara.txt):
├── file_test
│   ├── sub_folder_test2
│   │   └── ara.txt (<-)
--------------------

// The content of (file_test/sub_folder_test2/ara.txt):
ini ara
--------------------
--------------------
// The size of (file_test/sub_folder_test2/bal): 14B
--------------------
// The file location of (file_test/sub_folder_test2/bal):
├── file_test
│   ├── sub_folder_test2
│   │   └── bal (<-)
--------------------
--------------------
// The size of (file_test/sub_folder_test2/bal/Bal.txt): 6B
--------------------
// The file location of (file_test/sub_folder_test2/bal/Bal.txt):
├── file_test
│   ├── sub_folder_test2
│   │   ├── bal
│   │   │   └── Bal.txt (<-)
--------------------

// The content of (file_test/sub_folder_test2/bal/Bal.txt):
KOSONG
--------------------
--------------------
// The size of (file_test/test1.txt): 0B
--------------------
// The file location of (file_test/test1.txt):
├── file_test
│   └── test1.txt (<-)
--------------------

// The content of (file_test/test1.txt):

--------------------
--------------------
// The size of (go.mod): 21B
--------------------
// The file location of (go.mod):
└── go.mod (<-)
--------------------

// The content of (go.mod):
module main

go 1.19

--------------------
--------------------
// The size of (main.go): 5KB
--------------------
// The file location of (main.go):
└── main.go (<-)
--------------------

// The content of (main.go):
package main

import (
	"bufio"
	"fmt"
	"io/fs"
	"io/ioutil"
	"os"
	"path/filepath"
	"sort"
	"strings"
)

const (
	SeparatorLength    = 20
	ReaderIgnoreFile   = ".readerignore"
	OutputFileName     = "files_structure.txt"
	DefaultPermissions = 0644
)

func main() {
	rootPath := "."
	if err := ensureIgnoreFileExists(); err != nil {
		fmt.Printf("Error ensuring ignore file exists: %v\n", err)
		os.Exit(1)
	}
	paths, err := getPathsToProcess(rootPath, readIgnorePatterns())
	if err != nil {
		fmt.Printf("Error processing paths: %v\n", err)
		os.Exit(1)
	}

	outputFile, err := os.Create(OutputFileName)
	if err != nil {
		fmt.Printf("Error creating output file: %v\n", err)
		os.Exit(1)
	}
	defer outputFile.Close()

	printDirectoryTree(outputFile, rootPath, paths)
	processDirectoryStructure(outputFile, rootPath, paths)
}

func printDirectoryTree(outputFile *os.File, rootPath string, paths []string) {
	fmt.Fprintln(outputFile, "Directory Structure:")
	for _, path := range paths {
		relPath, _ := filepath.Rel(rootPath, path)
		dirTree := generateDirTree(relPath)
		fmt.Fprintln(outputFile, dirTree)
	}
	fmt.Fprintln(outputFile)
}

func generateDirTree(path string) string {
	parts := strings.Split(path, string(os.PathSeparator))
	tree := ""
	for i, part := range parts {
		if i == len(parts)-1 {
			tree += "└── " + part
		} else {
			tree += "├── " + part + "\n" + strings.Repeat("│   ", i+1)
		}
	}
	return tree
}

func ensureIgnoreFileExists() error {
	if _, err := os.Stat(ReaderIgnoreFile); os.IsNotExist(err) {
		content := getDefaultIgnorePatterns()
		return ioutil.WriteFile(ReaderIgnoreFile, []byte(content), DefaultPermissions)
	}
	return nil
}

func getDefaultIgnorePatterns() string {
	patterns := []string{
		"# Version Control", ".git", "",
		"# REPLIT", ".local", ".config", ".cache", "",
		"# Node", "node_modules", "",
		"# Logs", "*.log", "",
		"# IDEs and Editors", ".vscode", ".idea", "*.iml", "*.ipr", "*.iws", "*~", "*.swp", "",
		"# Operating System", ".DS_Store", "Thumbs.db", "",
		"# Reader", ".readerignore", "files_structure.txt", "",
		"# Additional Patterns", ".project-rc", "__pycache__/", "*.py[cod]", "*$py.class", "*.so",
		".Python", "build/", "develop-eggs/", "dist/", "downloads/", "eggs/", ".eggs/", "lib/", "lib64/",
		"parts/", "sdist/", "var/", "wheels/", "*.egg-info/", ".installed.cfg", "*.egg", "MANIFEST",
		"*.manifest", "*.spec", "pip-log.txt", "pip-delete-this-directory.txt", "htmlcov/", ".tox/",
		".coverage", ".coverage.*", ".cache", "nosetests.xml", "coverage.xml", "*.cover", ".hypothesis/",
		".pytest_cache/", "core.*", "*.mo", "*.pot", "*.log", "local_settings.py", "db.sqlite3", "instance/",
		".webassets-cache", ".scrapy", "docs/_build/", "target/", ".ipynb_checkpoints", ".python-version",
		"celerybeat-schedule", "*.sage.py", "/site", ".mypy_cache/", "",
		"# Media files", "*.mp4", "*.jpg", "*.jpeg", "*.png", "*.gif", "*.bmp", "*.tiff", "*.ico",
	}
	return strings.Join(patterns, "\n")
}

func getPathsToProcess(rootPath string, excludePatterns []string) ([]string, error) {
	var paths []string
	err := filepath.WalkDir(rootPath, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return fmt.Errorf("error accessing path %q: %w", path, err)
		}
		if !shouldExclude(path, excludePatterns) {
			paths = append(paths, path)
		}
		return nil
	})
	if err != nil {
		return nil, err
	}
	sort.Strings(paths)
	return paths, nil
}

func readIgnorePatterns() []string {
	var patterns []string
	file, err := os.Open(ReaderIgnoreFile)
	if err != nil {
		fmt.Printf("Error opening %s: %v\n", ReaderIgnoreFile, err)
		os.Exit(1)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		if line != "" && !strings.HasPrefix(line, "#") {
			patterns = append(patterns, line)
		}
	}
	return patterns
}

func processDirectoryStructure(outputFile *os.File, rootPath string, paths []string) {
	for _, path := range paths {
		if err := printFileDetails(rootPath, path, outputFile); err != nil {
			fmt.Printf("Error printing file details for %s: %v\n", path, err)
			continue
		}
	}
}

func printFileDetails(rootPath, path string, outputFile *os.File) error {
	info, err := os.Stat(path)
	if err != nil {
		return fmt.Errorf("error getting info for %s: %w", path, err)
	}

	sizeStr := formatFileSize(info.Size())
	relPath, _ := filepath.Rel(rootPath, path)

	separator := strings.Repeat("-", SeparatorLength)
	fmt.Fprintf(outputFile, "%s\n// The size of (%s): %s\n", separator, relPath, sizeStr)
	fmt.Fprintf(outputFile, "%s\n// The file location of (%s):\n", separator, relPath)
	printPath(outputFile, relPath)
	fmt.Fprintf(outputFile, "%s\n", separator)

	if !info.IsDir() {
		content, _ := ioutil.ReadFile(path)
		fmt.Fprintf(outputFile, "\n// The content of (%s):\n", relPath)
		fmt.Fprintln(outputFile, string(content))
		fmt.Fprintf(outputFile, "%s\n", separator)
	}
	return nil
}

func formatFileSize(size int64) string {
	if size < 1024 {
		return fmt.Sprintf("%dB", size)
	}
	return fmt.Sprintf("%dKB", size/1024)
}

func shouldExclude(path string, patterns []string) bool {
	relPath, err := filepath.Rel(".", path)
	if err != nil {
		return false
	}

	for _, pattern := range patterns {
		matched, err := filepath.Match(pattern, relPath)
		if err != nil {
			continue
		}

		for _, part := range strings.Split(relPath, string(os.PathSeparator)) {
			dirMatched, _ := filepath.Match(pattern, part)
			if dirMatched {
				return true
			}
		}

		if matched {
			return true
		}
	}
	return false
}

func printPath(outputFile *os.File, relPath string) {
	dirs := strings.Split(relPath, string(os.PathSeparator))
	indent := ""
	for i, dir := range dirs {
		if i == len(dirs)-1 {
			fmt.Fprintf(outputFile, "%s└── %s (<-)\n", indent, dir)
		} else {
			fmt.Fprintf(outputFile, "%s├── %s\n", indent, dir)
			indent += "│   "
		}
	}
}

--------------------
--------------------
// The size of (replit.nix): 56B
--------------------
// The file location of (replit.nix):
└── replit.nix (<-)
--------------------

// The content of (replit.nix):
{ pkgs }: {
  deps = [
    pkgs.fish
    pkgs.exa
  ];
}
--------------------
